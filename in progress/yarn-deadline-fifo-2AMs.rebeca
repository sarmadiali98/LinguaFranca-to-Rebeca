reactiveclass ResourceManager(5)
{
	knownrebecs
	{
		AppMaster am1;
		AppMaster am2;
	}
	
	statevars
	{
		int FREE;
		int BUSY;
		int appMaster1;
		int appMaster2;
		int m_queue_misses; //Were deadlines in the queue missed
		int m_update_miss; //Was a deadline missed while a job was running
		int m_job_complete; //Did a job complete within the deadline
		int[3] fifo_queue;
		int DEFAULT_DEADLINE;
		int QUEUE_SIZE;
	}
	
	ResourceManager()
	{
		FREE = 1;
		BUSY = 0;
		appMaster1 = FREE;
		appMaster2 = FREE;
		m_queue_misses = 0;
		m_update_miss = 0;
		m_job_complete = 0;
		DEFAULT_DEADLINE = 3;
		fifo_queue[0] = DEFAULT_DEADLINE;
		fifo_queue[1] = DEFAULT_DEADLINE;
		fifo_queue[2] = DEFAULT_DEADLINE;
		QUEUE_SIZE = 3;
		self.checkQueue();
	}
	
	msgsrv checkQueue()
	{
		//1a. if an appmaster is free, send him the first job in the queue
		//1b. shift the queue and add a new job at the back
		//2. decrement all the deadlines in the queue
		m_queue_misses = 0;
		m_update_miss = 0;
		m_job_complete = 0;
		int I = 0;
		if(appMaster1 == FREE)
		{
			appMaster1 = BUSY;
			am1.runJob(fifo_queue[0]);
			I = 0;
			while(I < QUEUE_SIZE - 1)
			{
				fifo_queue[I] = fifo_queue[I + 1];
				I++;
			}
			fifo_queue[QUEUE_SIZE - 1] = DEFAULT_DEADLINE;
		}
		if(appMaster2 == FREE)
		{
			appMaster2 = BUSY;
			am2.runJob(fifo_queue[0]);
			I = 0;
			while(I < QUEUE_SIZE - 1)
			{
				fifo_queue[I] = fifo_queue[I + 1];
				I++;
			}
			fifo_queue[QUEUE_SIZE - 1] = DEFAULT_DEADLINE;
		}
		I = 0;
		int J = 0;
		while(I < QUEUE_SIZE)
		{
			fifo_queue[I]--;
			if(fifo_queue[I] == 0)
			{
				m_queue_misses++;
				J = I;
				while(J < QUEUE_SIZE - 1) //Shift the queue and put a new job in the back
				{
					fifo_queue[J] = fifo_queue[J + 1];
					J++;
				}
				fifo_queue[QUEUE_SIZE - 1] = DEFAULT_DEADLINE;
			}
			I++;
		}
		self.checkQueue() after(1);
	}
	
	msgsrv update(boolean deadline_miss)
	{
		m_queue_misses = 0;
		m_update_miss = 0;
		m_job_complete = 0;
		if(deadline_miss == true)
		{
			m_update_miss = 1;
		}
		else
		{
			m_job_complete = 1;
		}
		if(sender == am1)
		{
			appMaster1 = FREE;
		}
		else if(sender == am2)
		{
			appMaster2 = FREE;
		}
	}
}

reactiveclass AppMaster(5)
{
	knownrebecs
	{
		ResourceManager rm;
	}
	
	statevars
	{
		int doneJobs;
	}
	
	AppMaster()
	{
		doneJobs = 0;
	}
	
	msgsrv runJob(int dline) {
		int completion = 2;//?(2, 5);
		boolean deadline_miss;
		if(completion > dline)
		{
			deadline_miss = true;
			//Stops the job if deadline passes (self-preemption)
			rm.update(deadline_miss) after(dline);
		}
		else
		{
			deadline_miss = false;
			//Informs the rm as soon as the job completes
			rm.update(deadline_miss) after(completion);
			doneJobs++;
			if (doneJobs > 5)
				doneJobs = 1;
		}
	}
}

main
{
	ResourceManager rm(am1, am2):();
	AppMaster am1(rm):();
	AppMaster am2(rm):();
}