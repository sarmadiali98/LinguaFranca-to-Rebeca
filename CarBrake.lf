/**
 * The given Lingua Franca (LF) program models a simplified automatic braking system in a car, which
 * consists of a camera, a braking assistant, a brake pedal, and a brake. The camera continuously
 * generates frames at a regular interval of 20 milliseconds. The braking assistant processes these
 * frames and sends a brake signal every 10 frames, simulating an automatic braking decision based
 * on the image processing. Simultaneously, a simulated brake pedal is "pressed" roughly every
 * second, triggering a manual brake signal. Both automatic and manual brake signals are directed to
 * the brake reactor, which reacts by outputting a message indicating that the brake has been
 * triggered and the source of the signal. It also checks whether the reactions to these signals
 * meet certain deadlines (3 milliseconds for manual and 15 milliseconds for automatic braking),
 * printing an error message if a deadline is violated.
 */
target Cpp {
  cmake-include: "threads.cmake"
}

reactor Camera {
  timer t(20 msecs, 20 msecs)
  output frame: void

  reaction(t) -> frame {=
    frame.set(); // send a "frame"
  =}
}

reactor BrakingAssistant {
  input frame: void
  output trigger_brake: void

  state counter: int(0)

  reaction(frame) -> trigger_brake {=
    // processing takes some time
     std::this_thread::sleep_for(10ms);

    if (counter % 10 == 0) {
      std::cout << "[automatic] Send the brake signal - " << get_physical_time() << std::endl;
      trigger_brake.set();
    }
    counter++;
  =}
}

reactor BrakePedal {
  physical action pedal
  output trigger_brake: void

  state thread: std::thread

  reaction(startup) -> pedal {=
    this->thread = std::thread([&] () {
      // press the brake pedal roughly every second
      while (true) {
        std::this_thread::sleep_for(1005ms);
        std::cout << "[manual] Pressing the break pedal - " << get_physical_time() << std::endl;
        pedal.schedule(0ms);
      }
    });
  =}

  reaction(pedal) -> trigger_brake {=
    std::cout << "[manual] Send the brake signal - " << get_physical_time() << std::endl;
    trigger_brake.set();
  =}

  reaction(shutdown) {=
    thread.join();
  =}
}

reactor Brake {
  public preamble {=
    #include <thread>
  =}

  input brake_assistant: void
  input brake_pedal: void

  reaction(brake_pedal) {=
    std::cout << "[system] Brake triggered - " << get_physical_time() << std::endl;
    std::cout << "[system] source: manual" << std::endl;
  =} deadline(3 msecs) {=
    std::cout << "\033[1;31m[error]\033[0m Deadline on manual braking violated - " << get_physical_time() << std::endl;
  =}

  reaction(brake_assistant) {=
    std::cout << "[system] Brake triggered - " << get_physical_time() << std::endl;
    std::cout << "[system] source: assistant" << std::endl;
  =} deadline(15 msecs) {=
    std::cout << "\033[1;31m[error]\033[0m Deadline on automatic braking violated - " << get_physical_time() << std::endl;
  =}
}

main reactor {
  camera = new Camera()
  assistant = new BrakingAssistant()
  pedal = new BrakePedal()
  brake = new Brake()

  camera.frame -> assistant.frame
  assistant.trigger_brake -> brake.brake_assistant
  pedal.trigger_brake -> brake.brake_pedal
}
